scalar Date

type User {
    id: ID!
    email: String!
    username: String!
    roles: String
    firstName: String!
    lastName: String!
    active: Boolean
}

input UserDTO {
    email: String!
    username: String!
    password: String!
    firstName: String!
    lastName: String!
}

type Conversation {
    id: ID!
    messages: [Message]
    users: [User]
}
type Message {
    id: ID!
    text: String!
    conversationId: ID
    senderId: ID
    timeSent: Date
}

type MessageDTO {
    id: ID!
    text: String!
    conversationId: ID
    senderId: ID
    timeSent: String
}

input AuthenticationRequest {
    email: String!
    password: String!
}

type AuthenticationResponse {
    token: String!
    id: Long!
}

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    authenticateUser(
        authenticationRequest: AuthenticationRequest!
    ): AuthenticationResponse

    findUserByUsername(
        username: String
    ): User

    getConversations: [Conversation]

}

type Mutation {
    createUser(newUser: UserDTO): User

    createConversation(recipientIds: [ID]): Conversation

    createMessage(
        text: String!
        conversationId: ID!
    ): Message
}

type Subscription {
    sentMessage: Message
    createdConversation: Conversation
}